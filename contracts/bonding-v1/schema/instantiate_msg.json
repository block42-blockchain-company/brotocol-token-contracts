{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This structure describes the basic settings for creating a contract.",
  "type": "object",
  "required": [
    "astroport_factory",
    "bonding_mode",
    "bro_token",
    "min_bro_payout",
    "oracle_contract",
    "owner",
    "rewards_pool_contract",
    "treasury_contract",
    "ust_bonding_discount"
  ],
  "properties": {
    "astroport_factory": {
      "description": "astroport factory contract address",
      "type": "string"
    },
    "bonding_mode": {
      "description": "bonding mode",
      "allOf": [
        {
          "$ref": "#/definitions/BondingModeMsg"
        }
      ]
    },
    "bro_token": {
      "description": "bro token address",
      "type": "string"
    },
    "min_bro_payout": {
      "description": "minimum amount of bro to receive via bonding",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "oracle_contract": {
      "description": "price oracle contract address",
      "type": "string"
    },
    "owner": {
      "description": "contract/multisig address that allowed to control settings",
      "type": "string"
    },
    "rewards_pool_contract": {
      "description": "rewards pool address",
      "type": "string"
    },
    "treasury_contract": {
      "description": "treasury contract address",
      "type": "string"
    },
    "ust_bonding_discount": {
      "description": "discount percentage for ust bonding",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    }
  },
  "definitions": {
    "BondingModeMsg": {
      "title": "BondingModeMsg",
      "description": "This structure describes the bonding contract mode.",
      "oneOf": [
        {
          "title": "Description",
          "description": "Enables both ust and lp bonding option. Exchanged bro tokens will become claimable after vesting period.",
          "type": "object",
          "required": [
            "normal"
          ],
          "properties": {
            "normal": {
              "type": "object",
              "required": [
                "lp_bonding_discount",
                "lp_token",
                "ust_bonding_reward_ratio",
                "vesting_period_blocks"
              ],
              "properties": {
                "lp_bonding_discount": {
                  "description": "discount percentage for lp bonding",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    }
                  ]
                },
                "lp_token": {
                  "description": "bro/ust lp token address",
                  "type": "string"
                },
                "ust_bonding_reward_ratio": {
                  "description": "distributed reward percentage for ust bonding balance",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    }
                  ]
                },
                "vesting_period_blocks": {
                  "description": "vesting period for withdrawal",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Description",
          "description": "Enables only ust bonding option. Exchanged bro tokens will be locked in staking contract for configured amount of epochs and then claimable with extra bro/bbro reward from it.",
          "type": "object",
          "required": [
            "community"
          ],
          "properties": {
            "community": {
              "type": "object",
              "required": [
                "epochs_locked",
                "staking_contract"
              ],
              "properties": {
                "epochs_locked": {
                  "description": "how many epochs specified amount will be locked",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "staking_contract": {
                  "description": "staking contract address",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
