{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "description": "This structure describes the fields for config response message.",
  "type": "object",
  "required": [
    "bbro_minter_contract",
    "bro_token",
    "epoch_manager_contract",
    "lockup_config",
    "min_staking_amount",
    "owner",
    "rewards_pool_contract",
    "unstake_period_blocks"
  ],
  "properties": {
    "bbro_minter_contract": {
      "description": "bbro minter address",
      "type": "string"
    },
    "bro_token": {
      "description": "bro token address",
      "type": "string"
    },
    "epoch_manager_contract": {
      "description": "epoch manager contract address",
      "type": "string"
    },
    "lockup_config": {
      "description": "lockup config",
      "allOf": [
        {
          "$ref": "#/definitions/LockupConfigResponse"
        }
      ]
    },
    "min_staking_amount": {
      "description": "minimum staking amount",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "owner": {
      "description": "contract/multisig address that allowed to control settings",
      "type": "string"
    },
    "rewards_pool_contract": {
      "description": "rewards pool address",
      "type": "string"
    },
    "unstake_period_blocks": {
      "description": "vesting period for withdrawal",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "LockupConfigResponse": {
      "title": "LockupConfigResponse",
      "description": "This structure describes the fields for lockup config response message.",
      "type": "object",
      "required": [
        "base_rate",
        "exponential_growth",
        "linear_growth",
        "max_lockup_period_epochs",
        "min_lockup_period_epochs"
      ],
      "properties": {
        "base_rate": {
          "description": "base rate for bbro premium reward calculation",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "exponential_growth": {
          "description": "exponential growth for bbro premium reward calculation",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "linear_growth": {
          "description": "linear growth for bbro premium reward calculation",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "max_lockup_period_epochs": {
          "description": "max lockup period",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "min_lockup_period_epochs": {
          "description": "min lockup period",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
