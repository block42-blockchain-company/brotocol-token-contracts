{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the execute messages of the contract.",
  "oneOf": [
    {
      "title": "Description",
      "description": "Receives a message of type [`Cw20ReceiveMsg`] and processes it depending on the received template.",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Lockup unlocked staked amount",
      "type": "object",
      "required": [
        "lockup_staked"
      ],
      "properties": {
        "lockup_staked": {
          "type": "object",
          "required": [
            "amount",
            "epochs_locked"
          ],
          "properties": {
            "amount": {
              "description": "amount of tokens to lock",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "epochs_locked": {
              "description": "how many epochs specified amount will be locked",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Unstake staked amount of tokens. Tokens will be claimable only after passing the unstaking period.",
      "type": "object",
      "required": [
        "unstake"
      ],
      "properties": {
        "unstake": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "description": "amount of tokens to unstake",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Withdraw the amount of tokens that have already passed the unstaking period.",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Claim available bro reward amount",
      "type": "object",
      "required": [
        "claim_bro_rewards"
      ],
      "properties": {
        "claim_bro_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Claim available bbro reward amount",
      "type": "object",
      "required": [
        "claim_bbro_rewards"
      ],
      "properties": {
        "claim_bbro_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Updates contract settings ## Executor Only owner can execute this function",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "base_rate": {
              "description": "base rate for bbro premium reward calculation",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "exponential_growth": {
              "description": "exponential growth for bbro premium reward calculation",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "linear_growth": {
              "description": "linear growth for bbro premium reward calculation",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_lockup_period_epochs": {
              "description": "max lockup period",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "min_lockup_period_epochs": {
              "description": "min lockup period",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "min_staking_amount": {
              "description": "minimum staking amount",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "description": "contract/multisig address that allowed to control settings",
              "type": [
                "string",
                "null"
              ]
            },
            "unstake_period_blocks": {
              "description": "vesting period for withdrawal",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
