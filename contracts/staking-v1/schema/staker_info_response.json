{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "StakerInfoResponse",
  "description": "This structure describes the fields for staker info response message.",
  "type": "object",
  "required": [
    "last_balance_update",
    "locked_stake_amount",
    "lockups",
    "pending_bbro_reward",
    "pending_bro_reward",
    "reward_index",
    "staker",
    "unlocked_stake_amount"
  ],
  "properties": {
    "last_balance_update": {
      "description": "last balance update(stake, unstake, claim) block",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "locked_stake_amount": {
      "description": "amount of locked BRO tokens staked by staker",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "lockups": {
      "description": "amounts locked for specified amount of epochs",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LockupInfoResponse"
      }
    },
    "pending_bbro_reward": {
      "description": "amount of pending bbro rewards of staker",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "pending_bro_reward": {
      "description": "amount of pending bro rewards of staker",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "reward_index": {
      "description": "reward index of staker",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "staker": {
      "description": "staker address",
      "type": "string"
    },
    "unlocked_stake_amount": {
      "description": "amount of unlocked BRO tokens staked by staker",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "LockupInfoResponse": {
      "title": "Description",
      "description": "This structure describes the fields for lockup info response message.",
      "type": "object",
      "required": [
        "amount",
        "epochs_locked",
        "locked_at_block"
      ],
      "properties": {
        "amount": {
          "description": "locked amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "epochs_locked": {
          "description": "amount of epochs until lockup will be unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "locked_at_block": {
          "description": "block at whick locup was created",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
