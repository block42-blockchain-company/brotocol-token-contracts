{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the execute messages of the contract.",
  "oneOf": [
    {
      "title": "Description",
      "description": "Receives a message of type [`Cw20ReceiveMsg`] and processes it depending on the received template.",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Registers a list of accounts for sale.",
      "type": "object",
      "required": [
        "register_accounts"
      ],
      "properties": {
        "register_accounts": {
          "type": "object",
          "required": [
            "accounts"
          ],
          "properties": {
            "accounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WhitelistedAccountInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Purchase bro by fixed price by providing ust amount.",
      "type": "object",
      "required": [
        "purchase"
      ],
      "properties": {
        "purchase": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Withdraw remaining bro balance after sale is over.",
      "type": "object",
      "required": [
        "withdraw_remaining_balance"
      ],
      "properties": {
        "withdraw_remaining_balance": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Creates an offer for a new owner. The validity period of the offer is set in the `expires_in_blocks` variable ## Executor Only owner can execute this function",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in_blocks",
            "new_owner"
          ],
          "properties": {
            "expires_in_blocks": {
              "description": "expiration period in blocks",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "new_owner": {
              "description": "new contract owner",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Removes the existing offer for the new owner ## Executor Only owner can execute this function",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Used to claim(approve) new owner proposal, thus changing contract's owner ## Executor Only address proposed as a new owner can execute this function",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "WhitelistedAccountInfo": {
      "title": "WhitelistedAccountInfo",
      "description": "This structure describes the fields for whitelisted account info object.",
      "type": "object",
      "required": [
        "address",
        "owned_nfts_count"
      ],
      "properties": {
        "address": {
          "description": "account address",
          "type": "string"
        },
        "owned_nfts_count": {
          "description": "amount of owned nfts",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    }
  }
}
